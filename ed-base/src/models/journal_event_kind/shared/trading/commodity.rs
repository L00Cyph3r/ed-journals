use crate::from_str_deserialize_impl;
use once_cell::sync::Lazy;
use regex::Regex;
use serde::Deserialize;
use std::str::FromStr;
use thiserror::Error;

#[derive(Debug)]
#[cfg_attr(test, derive(PartialEq))]
pub enum Commodity {
    // Chemicals
    ArgonomicTreatment,
    Explosives,
    HydrogenFuel,
    HydrogenPeroxide,
    LiquidOxygen,
    MineralOil,
    NerveAgents,
    Pesticides,
    RockforthFertiliser,
    SurfaceStabilisers,
    SyntheticReagents,
    Tritium,
    Water,

    // Consumer items
    Clothing,
    ConsumerTechnology,
    DomesticAppliances,
    EvacuationShelter,
    SurvivalEquipment,

    // Legal drugs
    Beer,
    BootlegLiquor,
    Liquor,
    Narcotics,
    OnionheadGammaStrain,
    Tobacco,
    Wine,

    // Foods
    Algae,
    AnimalMeat,
    Coffee,
    Fish,
    FoodCartridges,
    FruitAndVegetables,
    Grain,
    SyntheticMeat,
    Tea,

    // Industrial materials
    CeramicComposites,
    CMMComposite,
    InsulatingMembrane,
    MetaAlloys,
    MicroWeaveCollingHoses,
    NeofabricInsulation,
    Polymers,
    Semiconductors,
    Superconductors,

    // Machinery
    ArticulationMotors,
    AtmosphericProcessors,
    BuildingFabricators,
    CropHarvesters,
    EmergencyPowerCells,
    EnergyGridAssembly,
    ExhaustManifold,
    GeologicalEquipment,
    HeatsinkInterlink,
    HNShockMount,
    IonDistributor,
    MagneticEmitterCoil,
    MarineEquipment,
    MicrobialFurnaces,
    MineralExtractors,
    ModularTerminals,
    PowerConverter,
    PowerGenerators,
    PowerTransferBus,
    RadiationBaffle,
    ReinforcedMountingPlate,
    SkimmerComponents,
    ThermalCoolingUnits,
    WaterPurifiers,

    // Medicines
    AdvancedMedicines,
    AgriMedicines,
    BasicMedicines,
    CombatStabilisers,
    PerformanceEnhancers,
    ProgenitorCells,

    // Metals
    Aluminium,
    Beryllium,
    Bismuth,
    Cobalt,
    Copper,
    Gallium,
    Gold,
    Hafnium178,
    Indium,
    Lanthanum,
    Lithium,
    Osmium,
    Palladium,
    Platinum,
    Praseodymium,
    Samarium,
    Silver,
    Tantalum,
    Thallium,
    Thorium,
    Titanium,
    Uranium,

    // Minerals
    Alexandrite,
    Bauxite,
    Benitoite,
    Bertrandite,
    Bromellite,
    Coltan,
    Cryolite,
    Gallite,
    Goslarite,
    Grandidierite,
    Indite,
    Jadeite,
    Lepidolite,
    LithiumHydroxide,
    LowTemperatureDiamonds,
    MethaneClathrate,
    MethanolMonohydrateCrystals,
    Moissanite,
    Monazite,
    Musgravite,
    Painite,
    Pyrophyllite,
    Rhodplumsite,
    Rutile,
    Serendibite,
    Taaffeite,
    Uraninite,
    VoidOpal,

    // Salvage
    AIRelics,
    AncientArtefact,
    AncientKey,
    AnomalyParticles,
    AntimatterContainmentUnit,
    AniqueJewellery,
    Antiquities,
    AssaultPlans,
    BlackBox,
    BoneFragments,
    CausticTissueSample,
    CommercialSamples,
    CoralSap,
    CystSpecimen,
    DamagedEscapePod,
    DataCore,
    DiplomaticBag,
    EarthRelics,
    EncryptedCorrespondence,
    EncryptedDataStorage,
    ExperimentalChemicals,
    FossilRemnants,
    GeneBank,
    GeologicalSamples,
    GuardianCasket,
    GuardianOrb,
    GuardianRelic,
    GuardianTablet,
    GuardianTotem,
    GuardianUrn,
    Hostages,
    ImpureSpireMineral,
    LargeSurveyDataCache,
    MilitaryIntelligence,
    MilitaryPlans,
    MolluscBrainTissue,
    MolluscFluid,
    MolluscMembrane,
    MolluscMycelium,
    MolluscSoftTissue,
    MolluscSpores,
    MysteriousIdol,
    OccupiedEscapePod,
    OrganSample,
    PersonalEffects,
    PodCoreTissue,
    PodDeadTissue,
    PodMesoglea,
    PodOuterTissue,
    PodShellTissue,
    PodSurfaceTissue,
    PodTissue,
    PoliticalPrisoners,
    PreciousGems,
    ProhibitedResearchMaterials,
    ProtectiveMembraneScrap,
    PrototypeTech,
    RareArtwork,
    RebelTransmission,
    SAP8CoreContainer,
    ScientificResearch,
    ScientificSamples,
    SemiRefinesSpireMineral,
    SmallSurveyDataCache,
    SpacePioneerRelics,
    TacticalData,
    TechnicalBlueprints,
    ThargoidBasiliskTissueSample,
    ThargoidBioStorageCapsule,
    ThargoidBiologicalMatter,
    ThargoidCyclopsTissueSample,
    ThargoidGlaiveTissueSample,
    ThargoidHeart,
    ThargoidHydraTissueSample,
    ThargoidLink,
    ThargoidMedusaTissueSample,
    ThargoidOrthrusTissueSample,
    ThargoidProbe,
    ThargoidResin,
    ThargoidScoutTissueSample,
    ThargoidScytheTissueSample,
    ThargoidGeneratorTissueSample,
    ThargoidSensor,
    ThargoidTechnologySamples,
    TimeCapsule,
    TitanDeepTissueSample,
    TitanDriveComponent,
    TitanMawDeepTissueSample,
    TitanMawPartialTissueSample,
    TitanMawTissueSample,
    TitanPartialTissueSample,
    TitanTissueSample,
    TradeData,
    TrinketsOfHiddenFortune,
    UnclassifiedRelic,
    UnoccupiedEscapePod,
    UnstableDataCore,
    WreckageComponents,

    // Slaves
    ImperialSlaves,
    Slaves,

    // Technology
    AdvancedCatalysers,
    AnimalMonitors,
    AquaponicSystems,
    AutoFabricators,
    BioreducingLichen,
    ComputerComponents,
    HESuits,
    HardwareDiagnosticSensor,
    LandEnrichmentSystems,
    MedialDiagnosticEquipment,
    MicroControllers,
    MuonImager,
    Nanobreakers,
    ResonatingSeparators,
    Robotics,
    StructuralRegulators,
    TelemetrySuite,
    // Textiles
    ConductiveFabrics,
    Leather,
    MilitaryGradeFabrics,
    NaturalFabrics,
    SyntheticFabrics,
    // Waste
    Biowaste,
    ChemicalWaste,
    Scrap,
    ToxicWaste,
    // Weapons
    BattleWeapons,
    Landmines,
    NonLethalWeapons,
    PersonalWeapons,
    ReactiveArmour,
    // Rare
    JaquesQuinentianStill,
    KinagoViolins,
    ApaVietii,
    GeawenDanceDust,
    VanayequiCeratomorphaFur,
    KaretiiCouture,
    MukusubiiChitinos,
    UltraCompactProcessorPrototypes,
    EleuThermals,
    KamorinHistoricWeapons,
    CeremonialHeikeTea,
    VidavantianLace,
    KachiriginFilterLeeches,
    LyraeWeed,
    GalacticTravelGuide,
    HarmaSilverSeaRum,
    NgadandariFireOpals,
    AlyaBodySoap,
    HelvetitjPearls,
    OchoengChillies,
    OnionheadBetaStrain,
    KamitraCigars,
    NjangariSaddles,
    HipOrganophosphates,
    GilyaSignatureWeapons,
    HR7221Wheat,
    WheemeteWheatCakes,
    RajukruMultiStoves,
    Nanomedicines,
    NonEuclidianExotanks,
    NgunaModernAntiques,
    XiheBiomorphicCompanions,
    EsusekuCaviar,
    OrrerianViciousBrew,
    VHerculisBodyRub,
    VoidExtractCoffee,
    UszaianTreeGrub,
    HaidenBlackBrew,
    MotronaExperienceJelly,
    JaradharrePuzzleBox,
    PersonalGifts,
    MulachiGiantFungus,
    LTTHyperSweet,
    MedbStarlube,
    GiantVerrix,
    HIP118311Swarm,
    DisoMaCorn,
    LavianBrandy,
    AzureMilk,
    LeestianEvilJuice,
    CoquimSpongiformVictuals,
    LeatheryEggs,
    ShansCharisOrchid,
    KonggaAle,
    VegaSlimweed,
    TiolceWaste2PasteUnits,
    OphiuchExinoArtefacts,
    AltairianSkin,
    AganippeRush,
    CD75KittenBrandCoffee,
    HavasupaiDreamCatcher,
    EraninPearlWhisky,
    PavonisEarGrubs,
    OnionheadAlphaStrain,
    IndiBourbon,
    BakedGreebles,
    KarsukiLocusts,
    MasterChefs,
    YasoKondiLeaf,
    BurnhamBileDistillate,
    TheHuttonMug,
    CentauriMegaGin,
    UtgaroarMillennialEggs,
    SoontillRelics,
    ZeesszeAntGrubGlue,
    TheWatersOfShintara,
    BaltahsineVacuumKrill,
    SanumaDecorativeMeat,
    GiantIrukamaSnails,
    AnduligaFireWorks,
    CrystallineSpheres,
    PantaaPrayerSticks,
    ChiEridaniMarinePaste,
    EthgrezeTeaBuds,
    DeltaPhoenicisPalms,
    TarachSpice,
    WulpaHyperboreSystems,
    LiveHecateSeaWorms,
    KoroKungPellets,
    BastSnakeGin,
    TerraMaterBloodBores,
    WuthieloKuFroth,
    HonestyPills,
    CromSilverFesh,
    BorasetaniPathogenetics,
    CetiRabbits,
    AepyornisEgg,
    UzumokuLowGWings,
    CherbonesBloodCrystals,
    ToxandjiVirocide,
    Onionhead,
    LucanOnionhead,
    TanmarkTranquilTea,
    ThrutisCream,
    AlacarakmoSkinArt,
    PlatinumAlloy,
    MokojingBeastFeast,
    EdenApplesOfAerial,
    ChameleonCloth,
    TauriChimes,
    RusaniOldSmokey,
    AZCancriFormula42,
    GomanYauponCoffee,
    GerasianGueuzeBeer,
    JarouaRice,
    AnyNaCoffee,
    FujinTea,
    HIP10175BushMeat,
    MomusBogSpaniel,
    WitchhaulKobeBeef,
    SaxonWine,
    AroucaConventualSweets,
    AlbinoQuechuaMammothMeat,
    Duradrives,
    HolvaDuellingBlades,
    RapaBaoSnakeSkins,
    WolfFesh,
    EshuUmbrellas,
    NeritusBerries,
    JotunMookah,
    ChateauDeAegaeon,
    BelalansRayLeather,
    DamnaCarapaces,
    HIPProtoSquid,
    MechucosHighTea,
    DeuringasTruffles,
    BankiAmphibiousLeather,
    SothisCrystallineGold,
    TiegfriesSynthSilk,
    VolkhabBeeDrones,
    BuckyballBeerMats,
    ClassifiedExperimentalEquipment,

    // None
    Limpet,

    #[cfg(not(feature = "strict"))]
    Unknown(String),
}

#[derive(Debug, Error)]
pub enum CommodityError {
    #[error("Unknown commodity: '{0}'")]
    UnknownCommodity(String),
}

impl Commodity {
    fn name_to_commodity(name: &str) -> Result<Commodity, CommodityError> {
        let lower_case: &str = &name.to_ascii_lowercase();

        match lower_case {
            "argonomictreatment" => Ok(Commodity::ArgonomicTreatment),
            "explosives" => Ok(Commodity::Explosives),
            "hydrogenfuel" => Ok(Commodity::HydrogenFuel),
            "hydrogenperoxide" => Ok(Commodity::HydrogenPeroxide),
            "liquidoxygen" => Ok(Commodity::LiquidOxygen),
            "mineraloil" => Ok(Commodity::MineralOil),
            "nerveagents" => Ok(Commodity::NerveAgents),
            "pesticides" => Ok(Commodity::Pesticides),
            "rockforthfertiliser" => Ok(Commodity::RockforthFertiliser),
            "surfacestabilisers" => Ok(Commodity::SurfaceStabilisers),
            "syntheticreagents" => Ok(Commodity::SyntheticReagents),
            "tritium" => Ok(Commodity::Tritium),
            "water" => Ok(Commodity::Water),
            "clothing" => Ok(Commodity::Clothing),
            "consumertechnology" => Ok(Commodity::ConsumerTechnology),
            "domesticappliances" => Ok(Commodity::DomesticAppliances),
            "evacuationshelter" => Ok(Commodity::EvacuationShelter),
            "survivalequipment" => Ok(Commodity::SurvivalEquipment),
            "beer" => Ok(Commodity::Beer),
            "bootlegliquor" => Ok(Commodity::BootlegLiquor),
            "liquor" => Ok(Commodity::Liquor),
            "basicnarcotics" => Ok(Commodity::Narcotics),
            "onionheadc" => Ok(Commodity::OnionheadGammaStrain),
            "tobacco" => Ok(Commodity::Tobacco),
            "wine" => Ok(Commodity::Wine),
            "algae" => Ok(Commodity::Algae),
            "animalmeat" => Ok(Commodity::AnimalMeat),
            "coffee" => Ok(Commodity::Coffee),
            "fish" => Ok(Commodity::Fish),
            "foodcartridges" => Ok(Commodity::FoodCartridges),
            "fruitandvegetables" => Ok(Commodity::FruitAndVegetables),
            "grain" => Ok(Commodity::Grain),
            "syntheticmeat" => Ok(Commodity::SyntheticMeat),
            "tea" => Ok(Commodity::Tea),
            "ceramiccomposites" => Ok(Commodity::CeramicComposites),
            "cmmcomposite" => Ok(Commodity::CMMComposite),
            "insulatingmembrane" => Ok(Commodity::InsulatingMembrane),
            "metaalloys" => Ok(Commodity::MetaAlloys),
            "microweavecollinghoses" => Ok(Commodity::MicroWeaveCollingHoses),
            "neofabricinsulation" => Ok(Commodity::NeofabricInsulation),
            "polymers" => Ok(Commodity::Polymers),
            "semiconductors" => Ok(Commodity::Semiconductors),
            "superconductors" => Ok(Commodity::Superconductors),
            "articulationmotors" => Ok(Commodity::ArticulationMotors),
            "atmosphericprocessors" => Ok(Commodity::AtmosphericProcessors),
            "buildingfabricators" => Ok(Commodity::BuildingFabricators),
            "cropharvesters" => Ok(Commodity::CropHarvesters),
            "emergencypowercells" => Ok(Commodity::EmergencyPowerCells),
            "energygridassembly" => Ok(Commodity::EnergyGridAssembly),
            "exhaustmanifold" => Ok(Commodity::ExhaustManifold),
            "geologicalequipment" => Ok(Commodity::GeologicalEquipment),
            "heatsinkinterlink" => Ok(Commodity::HeatsinkInterlink),
            "hnshockmount" => Ok(Commodity::HNShockMount),
            "iondistributor" => Ok(Commodity::IonDistributor),
            "magneticemittercoil" => Ok(Commodity::MagneticEmitterCoil),
            "marineequipment" => Ok(Commodity::MarineEquipment),
            "microbialfurnaces" => Ok(Commodity::MicrobialFurnaces),
            "mineralextractors" => Ok(Commodity::MineralExtractors),
            "modularterminals" => Ok(Commodity::ModularTerminals),
            "powerconverter" => Ok(Commodity::PowerConverter),
            "powergenerators" => Ok(Commodity::PowerGenerators),
            "powertransferbus" => Ok(Commodity::PowerTransferBus),
            "radiationbaffle" => Ok(Commodity::RadiationBaffle),
            "reinforcedmountingplate" => Ok(Commodity::ReinforcedMountingPlate),
            "skimmercomponents" => Ok(Commodity::SkimmerComponents),
            "thermalcoolingunits" => Ok(Commodity::ThermalCoolingUnits),
            "waterpurifiers" => Ok(Commodity::WaterPurifiers),
            "advancedmedicines" => Ok(Commodity::AdvancedMedicines),
            "agrimedicines" => Ok(Commodity::AgriMedicines),
            "basicmedicines" => Ok(Commodity::BasicMedicines),
            "combatstabilisers" => Ok(Commodity::CombatStabilisers),
            "performanceenhancers" => Ok(Commodity::PerformanceEnhancers),
            "progenitorcells" => Ok(Commodity::ProgenitorCells),
            "aluminium" => Ok(Commodity::Aluminium),
            "beryllium" => Ok(Commodity::Beryllium),
            "bismuth" => Ok(Commodity::Bismuth),
            "cobalt" => Ok(Commodity::Cobalt),
            "copper" => Ok(Commodity::Copper),
            "gallium" => Ok(Commodity::Gallium),
            "gold" => Ok(Commodity::Gold),
            "hafnium178" => Ok(Commodity::Hafnium178),
            "indium" => Ok(Commodity::Indium),
            "lanthanum" => Ok(Commodity::Lanthanum),
            "lithium" => Ok(Commodity::Lithium),
            "osmium" => Ok(Commodity::Osmium),
            "palladium" => Ok(Commodity::Palladium),
            "platinum" => Ok(Commodity::Platinum),
            "praseodymium" => Ok(Commodity::Praseodymium),
            "samarium" => Ok(Commodity::Samarium),
            "silver" => Ok(Commodity::Silver),
            "tantalum" => Ok(Commodity::Tantalum),
            "thallium" => Ok(Commodity::Thallium),
            "thorium" => Ok(Commodity::Thorium),
            "titanium" => Ok(Commodity::Titanium),
            "uranium" => Ok(Commodity::Uranium),
            "alexandrite" => Ok(Commodity::Alexandrite),
            "bauxite" => Ok(Commodity::Bauxite),
            "benitoite" => Ok(Commodity::Benitoite),
            "bertrandite" => Ok(Commodity::Bertrandite),
            "bromellite" => Ok(Commodity::Bromellite),
            "coltan" => Ok(Commodity::Coltan),
            "cryolite" => Ok(Commodity::Cryolite),
            "gallite" => Ok(Commodity::Gallite),
            "goslarite" => Ok(Commodity::Goslarite),
            "grandidierite" => Ok(Commodity::Grandidierite),
            "indite" => Ok(Commodity::Indite),
            "jadeite" => Ok(Commodity::Jadeite),
            "lepidolite" => Ok(Commodity::Lepidolite),
            "lithiumhydroxide" => Ok(Commodity::LithiumHydroxide),
            "lowtemperaturediamonds" => Ok(Commodity::LowTemperatureDiamonds),
            "methaneclathrate" => Ok(Commodity::MethaneClathrate),
            "methanolmonohydratecrystals" => Ok(Commodity::MethanolMonohydrateCrystals),
            "moissanite" => Ok(Commodity::Moissanite),
            "monazite" => Ok(Commodity::Monazite),
            "musgravite" => Ok(Commodity::Musgravite),
            "painite" => Ok(Commodity::Painite),
            "pyrophyllite" => Ok(Commodity::Pyrophyllite),
            "rhodplumsite" => Ok(Commodity::Rhodplumsite),
            "rutile" => Ok(Commodity::Rutile),
            "serendibite" => Ok(Commodity::Serendibite),
            "taaffeite" => Ok(Commodity::Taaffeite),
            "uraninite" => Ok(Commodity::Uraninite),
            "opal" => Ok(Commodity::VoidOpal),
            "airelics" => Ok(Commodity::AIRelics),
            "ancientartefact" => Ok(Commodity::AncientArtefact),
            "ancientkey" => Ok(Commodity::AncientKey),
            "anomalyparticles" => Ok(Commodity::AnomalyParticles),
            "antimattercontainmentunit" => Ok(Commodity::AntimatterContainmentUnit),
            "aniquejewellery" => Ok(Commodity::AniqueJewellery),
            "antiquities" => Ok(Commodity::Antiquities),
            "assaultplans" => Ok(Commodity::AssaultPlans),
            "blackbox" => Ok(Commodity::BlackBox),
            "bonefragments" => Ok(Commodity::BoneFragments),
            "caustictissuesample" => Ok(Commodity::CausticTissueSample),
            "commercialsamples" => Ok(Commodity::CommercialSamples),
            "coralsap" => Ok(Commodity::CoralSap),
            "cystspecimen" => Ok(Commodity::CystSpecimen),
            "damagedescapepod" => Ok(Commodity::DamagedEscapePod),
            "datacore" => Ok(Commodity::DataCore),
            "diplomaticbag" => Ok(Commodity::DiplomaticBag),
            "earthrelics" => Ok(Commodity::EarthRelics),
            "encryptedcorrespondence" => Ok(Commodity::EncryptedCorrespondence),
            "encrypteddatastorage" => Ok(Commodity::EncryptedDataStorage),
            "experimentalchemicals" => Ok(Commodity::ExperimentalChemicals),
            "fossilremnants" => Ok(Commodity::FossilRemnants),
            "genebank" => Ok(Commodity::GeneBank),
            "geologicalsamples" => Ok(Commodity::GeologicalSamples),
            "guardiancasket" => Ok(Commodity::GuardianCasket),
            "guardianorb" => Ok(Commodity::GuardianOrb),
            "ancientrelic" => Ok(Commodity::GuardianRelic),
            "guardiantablet" => Ok(Commodity::GuardianTablet),
            "guardiantotem" => Ok(Commodity::GuardianTotem),
            "guardianurn" => Ok(Commodity::GuardianUrn),
            "hostages" => Ok(Commodity::Hostages),
            "impurespiremineral" => Ok(Commodity::ImpureSpireMineral),
            "largesurveydatacache" => Ok(Commodity::LargeSurveyDataCache),
            "militaryintelligence" => Ok(Commodity::MilitaryIntelligence),
            "militaryplans" => Ok(Commodity::MilitaryPlans),
            "molluscbraintissue" => Ok(Commodity::MolluscBrainTissue),
            "molluscfluid" => Ok(Commodity::MolluscFluid),
            "molluscmembrane" => Ok(Commodity::MolluscMembrane),
            "molluscmycelium" => Ok(Commodity::MolluscMycelium),
            "molluscsofttissue" => Ok(Commodity::MolluscSoftTissue),
            "molluscspores" => Ok(Commodity::MolluscSpores),
            "mysteriousidol" => Ok(Commodity::MysteriousIdol),
            "occupiedescapepod" => Ok(Commodity::OccupiedEscapePod),
            "organsample" => Ok(Commodity::OrganSample),
            "personaleffects" => Ok(Commodity::PersonalEffects),
            "podcoretissue" => Ok(Commodity::PodCoreTissue),
            "poddeadtissue" => Ok(Commodity::PodDeadTissue),
            "podmesoglea" => Ok(Commodity::PodMesoglea),
            "podoutertissue" => Ok(Commodity::PodOuterTissue),
            "podshelltissue" => Ok(Commodity::PodShellTissue),
            "podsurfacetissue" => Ok(Commodity::PodSurfaceTissue),
            "podtissue" => Ok(Commodity::PodTissue),
            "politicalprisoners" => Ok(Commodity::PoliticalPrisoners),
            "preciousgems" => Ok(Commodity::PreciousGems),
            "prohibitedresearchmaterials" => Ok(Commodity::ProhibitedResearchMaterials),
            "protectivemembranescrap" => Ok(Commodity::ProtectiveMembraneScrap),
            "prototypetech" => Ok(Commodity::PrototypeTech),
            "rareartwork" => Ok(Commodity::RareArtwork),
            "rebeltransmission" => Ok(Commodity::RebelTransmission),
            "sap8corecontainer" => Ok(Commodity::SAP8CoreContainer),
            "scientificresearch" => Ok(Commodity::ScientificResearch),
            "scientificsamples" => Ok(Commodity::ScientificSamples),
            "semirefinesspiremineral" => Ok(Commodity::SemiRefinesSpireMineral),
            "smallsurveydatacache" => Ok(Commodity::SmallSurveyDataCache),
            "spacepioneerrelics" => Ok(Commodity::SpacePioneerRelics),
            "tacticaldata" => Ok(Commodity::TacticalData),
            "technicalblueprints" => Ok(Commodity::TechnicalBlueprints),
            "thargoidbasilisktissuesample" => Ok(Commodity::ThargoidBasiliskTissueSample),
            "thargoidbiostoragecapsule" => Ok(Commodity::ThargoidBioStorageCapsule),
            "thargoidbiologicalmatter" => Ok(Commodity::ThargoidBiologicalMatter),
            "thargoidcyclopstissuesample" => Ok(Commodity::ThargoidCyclopsTissueSample),
            "thargoidglaivetissuesample" => Ok(Commodity::ThargoidGlaiveTissueSample),
            "thargoidheart" => Ok(Commodity::ThargoidHeart),
            "thargoidhydratissuesample" => Ok(Commodity::ThargoidHydraTissueSample),
            "thargoidlink" => Ok(Commodity::ThargoidLink),
            "thargoidmedusatissuesample" => Ok(Commodity::ThargoidMedusaTissueSample),
            "thargoidorthrustissuesample" => Ok(Commodity::ThargoidOrthrusTissueSample),
            "thargoidprobe" => Ok(Commodity::ThargoidProbe),
            "thargoidresin" => Ok(Commodity::ThargoidResin),
            "thargoidscouttissuesample" => Ok(Commodity::ThargoidScoutTissueSample),
            "thargoidscythetissuesample" => Ok(Commodity::ThargoidScytheTissueSample),
            "thargoidgeneratortissuesample" => Ok(Commodity::ThargoidGeneratorTissueSample),
            "thargoidsensor" => Ok(Commodity::ThargoidSensor),
            "thargoidtechnologysamples" => Ok(Commodity::ThargoidTechnologySamples),
            "timecapsule" => Ok(Commodity::TimeCapsule),
            "titandeeptissuesample" => Ok(Commodity::TitanDeepTissueSample),
            "titandrivecomponent" => Ok(Commodity::TitanDriveComponent),
            "titanmawdeeptissuesample" => Ok(Commodity::TitanMawDeepTissueSample),
            "titanmawpartialtissuesample" => Ok(Commodity::TitanMawPartialTissueSample),
            "titanmawtissuesample" => Ok(Commodity::TitanMawTissueSample),
            "titanpartialtissuesample" => Ok(Commodity::TitanPartialTissueSample),
            "titantissuesample" => Ok(Commodity::TitanTissueSample),
            "tradedata" => Ok(Commodity::TradeData),
            "trinketsofhiddenfortune" => Ok(Commodity::TrinketsOfHiddenFortune),
            "unclassifiedrelic" => Ok(Commodity::UnclassifiedRelic),
            "unoccupiedescapepod" => Ok(Commodity::UnoccupiedEscapePod),
            "unstabledatacore" => Ok(Commodity::UnstableDataCore),
            "wreckagecomponents" => Ok(Commodity::WreckageComponents),
            "imperialslaves" => Ok(Commodity::ImperialSlaves),
            "slaves" => Ok(Commodity::Slaves),
            "advancedcatalysers" => Ok(Commodity::AdvancedCatalysers),
            "animalmonitors" => Ok(Commodity::AnimalMonitors),
            "aquaponicsystems" => Ok(Commodity::AquaponicSystems),
            "autofabricators" => Ok(Commodity::AutoFabricators),
            "bioreducinglichen" => Ok(Commodity::BioreducingLichen),
            "computercomponents" => Ok(Commodity::ComputerComponents),
            "hesuits" => Ok(Commodity::HESuits),
            "hardwarediagnosticsensor" => Ok(Commodity::HardwareDiagnosticSensor),
            "landenrichmentsystems" => Ok(Commodity::LandEnrichmentSystems),
            "medialdiagnosticequipment" => Ok(Commodity::MedialDiagnosticEquipment),
            "microcontrollers" => Ok(Commodity::MicroControllers),
            "muonimager" => Ok(Commodity::MuonImager),
            "nanobreakers" => Ok(Commodity::Nanobreakers),
            "resonatingseparators" => Ok(Commodity::ResonatingSeparators),
            "robotics" => Ok(Commodity::Robotics),
            "structuralregulators" => Ok(Commodity::StructuralRegulators),
            "telemetrysuite" => Ok(Commodity::TelemetrySuite),
            "conductivefabrics" => Ok(Commodity::ConductiveFabrics),
            "leather" => Ok(Commodity::Leather),
            "militarygradefabrics" => Ok(Commodity::MilitaryGradeFabrics),
            "naturalfabrics" => Ok(Commodity::NaturalFabrics),
            "syntheticfabrics" => Ok(Commodity::SyntheticFabrics),
            "biowaste" => Ok(Commodity::Biowaste),
            "chemicalwaste" => Ok(Commodity::ChemicalWaste),
            "scrap" => Ok(Commodity::Scrap),
            "toxicwaste" => Ok(Commodity::ToxicWaste),
            "battleweapons" => Ok(Commodity::BattleWeapons),
            "landmines" => Ok(Commodity::Landmines),
            "nonlethalweapons" => Ok(Commodity::NonLethalWeapons),
            "personalweapons" => Ok(Commodity::PersonalWeapons),
            "reactivearmour" => Ok(Commodity::ReactiveArmour),
            "jaquesquinentianstill" => Ok(Commodity::JaquesQuinentianStill),
            "kinagoviolins" => Ok(Commodity::KinagoViolins),
            "apavietii" => Ok(Commodity::ApaVietii),
            "geawendancedust" => Ok(Commodity::GeawenDanceDust),
            "vanayequiceratomorphafur" => Ok(Commodity::VanayequiCeratomorphaFur),
            "karetiicouture" => Ok(Commodity::KaretiiCouture),
            "mukusubiichitinos" => Ok(Commodity::MukusubiiChitinos),
            "ultracompactprocessorprototypes" => Ok(Commodity::UltraCompactProcessorPrototypes),
            "eleuthermals" => Ok(Commodity::EleuThermals),
            "kamorinhistoricweapons" => Ok(Commodity::KamorinHistoricWeapons),
            "ceremonialheiketea" => Ok(Commodity::CeremonialHeikeTea),
            "vidavantianlace" => Ok(Commodity::VidavantianLace),
            "kachiriginfilterleeches" => Ok(Commodity::KachiriginFilterLeeches),
            "lyraeweed" => Ok(Commodity::LyraeWeed),
            "galactictravelguide" => Ok(Commodity::GalacticTravelGuide),
            "harmasilversearum" => Ok(Commodity::HarmaSilverSeaRum),
            "ngadandarifireopals" => Ok(Commodity::NgadandariFireOpals),
            "alyabodysoap" => Ok(Commodity::AlyaBodySoap),
            "helvetitjpearls" => Ok(Commodity::HelvetitjPearls),
            "ochoengchillies" => Ok(Commodity::OchoengChillies),
            "onionheadbetastrain" => Ok(Commodity::OnionheadBetaStrain),
            "kamitracigars" => Ok(Commodity::KamitraCigars),
            "njangarisaddles" => Ok(Commodity::NjangariSaddles),
            "hiporganophosphates" => Ok(Commodity::HipOrganophosphates),
            "gilyasignatureweapons" => Ok(Commodity::GilyaSignatureWeapons),
            "hr7221wheat" => Ok(Commodity::HR7221Wheat),
            "wheemetewheatcakes" => Ok(Commodity::WheemeteWheatCakes),
            "rajukrumultistoves" => Ok(Commodity::RajukruMultiStoves),
            "nanomedicines" => Ok(Commodity::Nanomedicines),
            "noneuclidianexotanks" => Ok(Commodity::NonEuclidianExotanks),
            "ngunamodernantiques" => Ok(Commodity::NgunaModernAntiques),
            "xihebiomorphiccompanions" => Ok(Commodity::XiheBiomorphicCompanions),
            "esusekucaviar" => Ok(Commodity::EsusekuCaviar),
            "orrerianviciousbrew" => Ok(Commodity::OrrerianViciousBrew),
            "vherculisbodyrub" => Ok(Commodity::VHerculisBodyRub),
            "voidextractcoffee" => Ok(Commodity::VoidExtractCoffee),
            "uszaiantreegrub" => Ok(Commodity::UszaianTreeGrub),
            "haidenblackbrew" => Ok(Commodity::HaidenBlackBrew),
            "motronaexperiencejelly" => Ok(Commodity::MotronaExperienceJelly),
            "jaradharrepuzzlebox" => Ok(Commodity::JaradharrePuzzleBox),
            "personalgifts" => Ok(Commodity::PersonalGifts),
            "mulachigiantfungus" => Ok(Commodity::MulachiGiantFungus),
            "ltthypersweet" => Ok(Commodity::LTTHyperSweet),
            "medbstarlube" => Ok(Commodity::MedbStarlube),
            "giantverrix" => Ok(Commodity::GiantVerrix),
            "hip118311swarm" => Ok(Commodity::HIP118311Swarm),
            "disomacorn" => Ok(Commodity::DisoMaCorn),
            "lavianbrandy" => Ok(Commodity::LavianBrandy),
            "azuremilk" => Ok(Commodity::AzureMilk),
            "leestianeviljuice" => Ok(Commodity::LeestianEvilJuice),
            "coquimspongiformvictuals" => Ok(Commodity::CoquimSpongiformVictuals),
            "leatheryeggs" => Ok(Commodity::LeatheryEggs),
            "shanscharisorchid" => Ok(Commodity::ShansCharisOrchid),
            "konggaale" => Ok(Commodity::KonggaAle),
            "vegaslimweed" => Ok(Commodity::VegaSlimweed),
            "tiolcewaste2pasteunits" => Ok(Commodity::TiolceWaste2PasteUnits),
            "ophiuchexinoartefacts" => Ok(Commodity::OphiuchExinoArtefacts),
            "altairianskin" => Ok(Commodity::AltairianSkin),
            "aganipperush" => Ok(Commodity::AganippeRush),
            "cd75kittenbrandcoffee" => Ok(Commodity::CD75KittenBrandCoffee),
            "havasupaidreamcatcher" => Ok(Commodity::HavasupaiDreamCatcher),
            "eraninpearlwhisky" => Ok(Commodity::EraninPearlWhisky),
            "pavoniseargrubs" => Ok(Commodity::PavonisEarGrubs),
            "onionheadalphastrain" => Ok(Commodity::OnionheadAlphaStrain),
            "indibourbon" => Ok(Commodity::IndiBourbon),
            "bakedgreebles" => Ok(Commodity::BakedGreebles),
            "karsukilocusts" => Ok(Commodity::KarsukiLocusts),
            "masterchefs" => Ok(Commodity::MasterChefs),
            "yasokondileaf" => Ok(Commodity::YasoKondiLeaf),
            "burnhambiledistillate" => Ok(Commodity::BurnhamBileDistillate),
            "thehuttonmug" => Ok(Commodity::TheHuttonMug),
            "centaurimegagin" => Ok(Commodity::CentauriMegaGin),
            "utgaroarmillennialeggs" => Ok(Commodity::UtgaroarMillennialEggs),
            "soontillrelics" => Ok(Commodity::SoontillRelics),
            "zeesszeantgrubglue" => Ok(Commodity::ZeesszeAntGrubGlue),
            "thewatersofshintara" => Ok(Commodity::TheWatersOfShintara),
            "baltahsinevacuumkrill" => Ok(Commodity::BaltahsineVacuumKrill),
            "sanumadecorativemeat" => Ok(Commodity::SanumaDecorativeMeat),
            "giantirukamasnails" => Ok(Commodity::GiantIrukamaSnails),
            "anduligafireworks" => Ok(Commodity::AnduligaFireWorks),
            "crystallinespheres" => Ok(Commodity::CrystallineSpheres),
            "pantaaprayersticks" => Ok(Commodity::PantaaPrayerSticks),
            "chieridanimarinepaste" => Ok(Commodity::ChiEridaniMarinePaste),
            "ethgrezeteabuds" => Ok(Commodity::EthgrezeTeaBuds),
            "deltaphoenicispalms" => Ok(Commodity::DeltaPhoenicisPalms),
            "tarachspice" => Ok(Commodity::TarachSpice),
            "wulpahyperboresystems" => Ok(Commodity::WulpaHyperboreSystems),
            "livehecateseaworms" => Ok(Commodity::LiveHecateSeaWorms),
            "korokungpellets" => Ok(Commodity::KoroKungPellets),
            "bastsnakegin" => Ok(Commodity::BastSnakeGin),
            "terramaterbloodbores" => Ok(Commodity::TerraMaterBloodBores),
            "wuthielokufroth" => Ok(Commodity::WuthieloKuFroth),
            "honestypills" => Ok(Commodity::HonestyPills),
            "cromsilverfesh" => Ok(Commodity::CromSilverFesh),
            "borasetanipathogenetics" => Ok(Commodity::BorasetaniPathogenetics),
            "cetirabbits" => Ok(Commodity::CetiRabbits),
            "aepyornisegg" => Ok(Commodity::AepyornisEgg),
            "uzumokulowgwings" => Ok(Commodity::UzumokuLowGWings),
            "cherbonesbloodcrystals" => Ok(Commodity::CherbonesBloodCrystals),
            "toxandjivirocide" => Ok(Commodity::ToxandjiVirocide),
            "onionhead" => Ok(Commodity::Onionhead),
            "lucanonionhead" => Ok(Commodity::LucanOnionhead),
            "tanmarktranquiltea" => Ok(Commodity::TanmarkTranquilTea),
            "thrutiscream" => Ok(Commodity::ThrutisCream),
            "alacarakmoskinart" => Ok(Commodity::AlacarakmoSkinArt),
            "platinumalloy" => Ok(Commodity::PlatinumAlloy),
            "mokojingbeastfeast" => Ok(Commodity::MokojingBeastFeast),
            "edenapplesofaerial" => Ok(Commodity::EdenApplesOfAerial),
            "chameleoncloth" => Ok(Commodity::ChameleonCloth),
            "taurichimes" => Ok(Commodity::TauriChimes),
            "rusanioldsmokey" => Ok(Commodity::RusaniOldSmokey),
            "azcancriformula42" => Ok(Commodity::AZCancriFormula42),
            "gomanyauponcoffee" => Ok(Commodity::GomanYauponCoffee),
            "gerasiangueuzebeer" => Ok(Commodity::GerasianGueuzeBeer),
            "jarouarice" => Ok(Commodity::JarouaRice),
            "anynacoffee" => Ok(Commodity::AnyNaCoffee),
            "fujintea" => Ok(Commodity::FujinTea),
            "hip10175bushmeat" => Ok(Commodity::HIP10175BushMeat),
            "momusbogspaniel" => Ok(Commodity::MomusBogSpaniel),
            "witchhaulkobebeef" => Ok(Commodity::WitchhaulKobeBeef),
            "saxonwine" => Ok(Commodity::SaxonWine),
            "aroucaconventualsweets" => Ok(Commodity::AroucaConventualSweets),
            "albinoquechuamammothmeat" => Ok(Commodity::AlbinoQuechuaMammothMeat),
            "duradrives" => Ok(Commodity::Duradrives),
            "holvaduellingblades" => Ok(Commodity::HolvaDuellingBlades),
            "rapabaosnakeskins" => Ok(Commodity::RapaBaoSnakeSkins),
            "wolffesh" => Ok(Commodity::WolfFesh),
            "eshuumbrellas" => Ok(Commodity::EshuUmbrellas),
            "neritusberries" => Ok(Commodity::NeritusBerries),
            "jotunmookah" => Ok(Commodity::JotunMookah),
            "chateaudeaegaeon" => Ok(Commodity::ChateauDeAegaeon),
            "belalansrayleather" => Ok(Commodity::BelalansRayLeather),
            "damnacarapaces" => Ok(Commodity::DamnaCarapaces),
            "hipprotosquid" => Ok(Commodity::HIPProtoSquid),
            "mechucoshightea" => Ok(Commodity::MechucosHighTea),
            "deuringastruffles" => Ok(Commodity::DeuringasTruffles),
            "bankiamphibiousleather" => Ok(Commodity::BankiAmphibiousLeather),
            "sothiscrystallinegold" => Ok(Commodity::SothisCrystallineGold),
            "tiegfriessynthsilk" => Ok(Commodity::TiegfriesSynthSilk),
            "volkhabbeedrones" => Ok(Commodity::VolkhabBeeDrones),
            "buckyballbeermats" => Ok(Commodity::BuckyballBeerMats),
            "classifiedexperimentalequipment" => Ok(Commodity::ClassifiedExperimentalEquipment),
            "drones" => Ok(Commodity::Limpet),

            #[cfg(not(feature = "strict"))]
            _ => Ok(Commodity::Unknown(name.to_string())),

            #[cfg(feature = "strict")]
            _ => Err(CommodityError::UnknownCommodity(name.to_string())),
        }
    }
}

const COMMODITY_NAME_REGEX: Lazy<Regex> =
    Lazy::new(|| Regex::new(r#"^\$?([a-zA-Z_]+?)(_[nN]ame;)?$"#).unwrap());

impl FromStr for Commodity {
    type Err = CommodityError;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        let Some(captures) = COMMODITY_NAME_REGEX.captures(s) else {
            return Err(CommodityError::UnknownCommodity(s.to_string()));
        };

        Commodity::name_to_commodity(
            captures
                .get(1)
                .expect("Should have been captured already")
                .as_str(),
        )
    }
}

from_str_deserialize_impl!(Commodity);
